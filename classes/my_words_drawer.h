#include <vector>
#include <map>
#include <string>
#include <iostream>
#include <locale>

using namespace std;

class WordsDrawer
{
private:
    /* data */
    char drawerSymbol;
    string input;
    int rowLength;

public:
    WordsDrawer(/* args */ string input, char symbol);
    ~WordsDrawer();
    void set_drawer_symbol(char symbol);
    void set_input(string input);
    void draw();
    int get_row_length();
};

/*********************************************************************
 *     WordsDrawer(string input,char symbol)
 *
 *********************************************************************/
WordsDrawer::WordsDrawer(/* args */ string input, char symbol)
{
    this->input = input;
    this->drawerSymbol = symbol;
}

WordsDrawer::~WordsDrawer()
{
    this->input = "";
    this->drawerSymbol = '\0';
}

/**********************************************************************
 *          draw_words ()
 *  Draws a list of words using a custom symbol.
 *
 **********************************************************************/
void WordsDrawer::draw()
{
    // Define patterns for each letter using placeholders ('~')
    map<char, vector<string>> letterPatterns = {
        // caps letter
        {'A', {" ~~~ ", "~   ~", "~~~~~", "~   ~", "~   ~"}},
        {'B', {"~~~~ ", "~   ~", "~~~  ", "~   ~", "~~~~ "}},
        {'C', {" ~~~~", "~    ", "~    ", "~    ", " ~~~~"}},
        {'D', {"~~~~ ", "~   ~", "~   ~", "~   ~", "~~~~ "}},
        {'E', {"~~~~~", "~    ", "~~~  ", "~    ", "~~~~~"}},
        {'F', {"~~~~~", "~    ", "~~~~~", "~    ", "~    "}},
        {'G', {" ~~~~", "~    ", "~  ~~", "~   ~", " ~~~~"}},
        {'H', {"~   ~", "~   ~", "~~~~~", "~   ~", "~   ~"}},
        {'I', {"~~~", " ~ ", " ~ ", " ~ ", "~~~"}},
        {'J', {"   ~~", "    ~", "    ~", "~   ~", " ~~~ "}},
        {'K', {"~   ~", "~  ~ ", "~ ~  ", "~  ~ ", "~   ~"}},
        {'L', {"~   ", "~   ", "~   ", "~   ", "~~~~"}},
        {'M', {"~   ~", "~ ~ ~", "~ ~ ~", "~   ~", "~   ~"}},
        {'N', {"~   ~", "~~  ~", "~ ~ ~", "~  ~~", "~   ~"}},

        {'O', {" ~~~ ", "~   ~", "~   ~", "~   ~", " ~~~ "}},

        {'P', {"~~~~ ", "~   ~", "~~~~ ", "~    ", "~    "}},

        {'Q', {" ~~~ ", "~~  ~", "~ ~ ~", "~  ~~", " ~~ ~"}},
        {'R', {"~~~~ ", "~   ~", "~~~~ ", "~  ~ ", "~   ~"}},
        {'S', {" ~~~~", "~    ", " ~~~ ", "    ~", "~~~~ "}},

        {'T', {"~~~~~", "  ~  ", "  ~  ", "  ~  ", "  ~  "}},
        {'U', {"~   ~", "~   ~", "~   ~", "~   ~", " ~~~ "}},
        {'V', {"~   ~", "~   ~", "~   ~", " ~~~ ", "  ~  "}},
        {'W', {"~   ~", "~   ~", "~ ~ ~", "~~ ~~", "~   ~"}},
        {'X', {"~    ~", " ~  ~ ", "  ~~  ", " ~  ~ ", "~    ~"}},
        {'Y', {"~    ~", " ~  ~ ", "  ~~  ", " ~    ", "~     "}},
        {'Z', {"~~~~~", "    ~", "  ~  ", "~    ", "~~~~~"}},

        {' ', {"   ", "   ", "   ", "   ", "   "}},
        // numbers
        {'1', {" ~ ", "~~ ", " ~ ", " ~ ", "~~~"}},
        {'2', {" ~~~ ", "~   ~", "   ~ ", " ~   ", "~~~~~"}},
        {'3', {"~~~ ", "   ~", "~~~ ", "   ~", "~~~ "}},

        {'4', {"  ~~ ", " ~ ~ ", "~~~~~", "   ~ ", "   ~ "}},
        {'5', {"~~~~ ", "~    ", "~~~~ ", "    ~", "~~~~ "}},
        {'6', {" ~~~~", "~    ", "~~~~ ", "~   ~", " ~~~ "}},
        {'7', {"~~~~~", "    ~", "  ~  ", " ~   ", "~    "}},

        {'8', {" ~~~ ", "~   ~", " ~~~ ", "~   ~", " ~~~ "}},
        {'9', {" ~~~~", "~   ~", " ~~~~", "    ~", " ~~~ "}},
        {'0', {" ~~~ ", "~   ~", "~ ~ ~", "~   ~", " ~~~ "}},
        // some symbol character
        {'+', {"  ~  ", "  ~  ", "~~~~~", "  ~  ", "  ~  "}},
        {'-', {"   ", "   ", "~~~", "   ", "   "}},
        {'*', {"~  ~  ~", " ~ ~ ~ ", "   ~   ", " ~ ~ ~ ", "~  ~  ~"}},
        {'_', {"    ", "    ", "    ", "    ", "~~~~"}},
        {'(', {" ~", "~ ", "~ ", "~ ", " ~"}},
        {')', {"~ ", " ~", " ~", " ~", "~ "}},
        {'[', {"~~", "~ ", "~ ", "~ ", "~~"}},
        {']', {"~~", " ~", " ~", " ~", "~~"}},

        {'{', {" ~~", " ~ ", "~~ ", " ~ ", " ~~"}},

        {'}', {"~~ ", " ~ ", " ~~", " ~ ", "~~ "}},

        {':', {"   ", " ~ ", "   ", " ~ ", "   "}},
        {'#', {"  ~  ~", "~~~~~~", " ~  ~ ", "~~~~~~", "~  ~ "}},
        {'=', {"    ", "~~~~", "    ", "~~~~", "    "}},
        {'!', {"~", "~", "~", " ", "~"}},
        {'.', {" ", " ", " ", " ", "~"}},
        {',', {"  ", "  ", "  ", " ~", "~ "}},
        {'%', {"    ~", " O ~ ", "  ~  ", " ~  O", "~    "}},
        {'$', {"  ~  ", " ~~~", "~ ~ ~", " ~~~ ", "  ~  "}},
        {'"', {"~~", "~~", "  ", "  ", "  "}},
        {'\'', {"~", "~", " ", " ", " "}},
        {'<', {"  ~", " ~ ", "~  ", " ~ ", "  ~"}},
        {'>', {"~  ", " ~ ", "  ~", " ~ ", "~  "}},
        {'/', {"    ~", "   ~ ", "  ~  ", " ~   ", "~    "}},
        {'\\', {"~    ", " ~   ", "  ~  ", "   ~ ", "    ~"}},

        {'?', {" ~~~ ", "~   ~", "   ~ ", "  ~  ", "  ~  "}},
        {'&', {"  ~~ ", " ~   ", " ~~~ ", "~  ~~", " ~~ ~"}},
        {'^', {" ~ ", "~ ~", "   ", "   ", "   "}},
        //  small letter

        {'a', {"    ", " ~~~", " ~~~", "~  ~", " ~~~"}},
        {'b', {"~   ", "~   ", "~~~ ", "~  ~", "~~~ "}},
        {'c', {"    ", "    ", " ~~~", "~   ", " ~~~"}},
        {'d', {"   ~", "   ~", " ~~~", "~  ~", " ~~~"}},
        {'e', {"     ", " ~~~ ", "~~~~~", "~    ", " ~~~ "}},
        {'f', {"    ", "~~~~", "~~~ ", "~   ", "~   "}},
        {'g', {"    ", " ~~~", "~  ~", " ~~~", " ~~~"}},
        {'h', {"~   ", "~   ", "~~~ ", "~  ~", "~  ~"}},
        {'i', {" ", "~", " ", "~", "~"}},
        {'j', {"   ", "  ~", "  ~", "  ~", "~~ "}},
        {'k', {"~   ", "~  ~", "~ ~ ", "~ ~ ", "~  ~"}},
        {'l', {"~   ", "~   ", "~   ", "~   ", " ~~~"}},
        {'m', {"     ", "~ ~ ~", "~ ~ ~", "~ ~ ~", "~   ~"}},
        {'n', {"    ", " ~~ ", "~  ~", "~  ~", "~  ~"}},

        {'o', {"    ", " ~~ ", "~  ~", "~  ~", " ~~ "}},

        {'p', {"    ", "~~~ ", "~  ~", "~~~ ", "~   "}},

        {'q', {"    ", " ~~~", "~  ~", " ~~~", "   ~"}},
        {'r', {"   ", "~ ~", "~~ ", "~  ", "~  "}},
        {'s', {"    ", " ~~~", "~   ", " ~~~", "~~~ "}},

        {'t', {"~   ", "~   ", "~~~ ", "~   ", " ~~~"}},
        {'u', {"    ", "~  ~", "~  ~", "~  ~", " ~~ "}},
        {'v', {"     ", "~   ~", "~   ~", " ~ ~ ", "  ~  "}},
        {'w', {"     ", "~   ~", "~   ~", "~ ~ ~", "~~ ~~"}},
        {'x', {"    ", "    ", "~  ~", " ~~ ", "~  ~"}},
        {'y', {"     ", "~   ~", "~  ~ ", " ~   ", "~    "}},
        {'z', {"    ", "~~~~", "  ~ ", " ~  ", "~~~~"}},

        // Add more letters as needed
    };

    // Replace the '~' in patterns with the chosen symbol
    for (auto &letter : letterPatterns)
    {   
        for (auto &row : letter.second)
        {
            for (char& c : row)
            {
                if (c == '~')
                {
                    c = this->drawerSymbol; // Replace with the chosen symbol
                }
            }
        }
    }

    // Create an array to store each row of the output
    vector<string> rows(5, "");

    // Loop through each character in the input
    for (char c : this->input)
    {
        // c = toupper(c); // Convert to uppercase
        if (letterPatterns.find(c) != letterPatterns.end())
        {
            // Append each row of the letter to the corresponding row in output
            for (int i = 0; i < 5; ++i)
            {
                rows[i] += letterPatterns[c][i] + "   "; // Add spacing between letters
            }
        }
    }

    // Print the final rows
    for (const string &row : rows)
    {
        cout<<row << endl;
        rowLength = row.length();
    }
}

/*********************************************************************
 *      setting alternative symbol for the drawer
 *
 *********************************************************************/
void WordsDrawer::set_drawer_symbol(char symbol)
{
    this->drawerSymbol = symbol;
}

/*********************************************************************
 *      modify input string to object
 *
 *********************************************************************/

void WordsDrawer::set_input(string input)
{
    this->input = input;
}

/*********************************************************************
 *      Returning the length of last row from vector
 *
 *********************************************************************/
int WordsDrawer::get_row_length()
{
    return this->rowLength;
}

